/* Arrow
----------------------------- */
@mixin arrow-base ($z-index: 2) {
	position: relative;

	&:after {
		content: "";
		display: block;
		width: 40px;
		height: 40px;
		border-style: solid;
		border-width: 0 0 2px 2px;
		transform: translate(-50%, 30%) rotate(-45deg);
		position: absolute;
		bottom: 0;
		left: calc(50% - 2px);
		z-index: $z-index;
	}
}

@mixin arrow ($border-color: $light-blue, $bg-color: #FFF, $z-index: 2) {
	@include arrow-base($z-index);
	&:after {
		border-color: $border-color;
		background-color: $bg-color;
	}
}

@mixin arrow-color($border-color: $light-blue, $bg-color: #FFF) {
	&:after {
		border-color: $border-color;
		background-color: $bg-color;
	}
}

/* Brackets
----------------------------- */
@mixin brackets ($color: $light-blue, $border-width: 2px, $width: 10px, $axis: x, $padding: rem-calc(10 20)){
	position: relative;
	padding: $padding;

	&:before,
	&:after {
		flex: 0 0 auto;
		content: "";
		display: block;
		position: absolute;
		border-color: $color;
		border-style: solid;

		@if($axis == x){
			top: 0;
			height: 100%;
			width: $width;
		} @else {
			left: 0;
			height: $width;
			width: 100%;
		}
	}

	&:before {
		@if($axis == x){
			left: 0;
			border-width: $border-width 0 $border-width $border-width;
		} @else {
			top: 0;
			border-width: $border-width $border-width 0 $border-width;
		}
	}

	&:after {
		@if($axis == x){
			right: 0;
			border-width: $border-width $border-width $border-width 0;
		} @else {
			bottom: 0;
			border-width: 0 $border-width $border-width $border-width;
		}
	}
}

@mixin bracket-color ($color: $light-blue){
	&:before,
	&:after {
		border-color: $color;
	}
}

/* Template styles
----------------------------- */
@function get-template-value($map, $key){
	@if(map-has-key($map, $key)){
		@return map-get($map, $key);
	} @else {
		@return $key;
	}
}

@mixin template-text-color($color: color, $pref-color-key: false){
	@each $name, $map in $template-atts {
		.page-template-#{$name} & {
			@if($pref-color-key != false and map-has-key($map, $pref-color-key)){
				color: map-get($map, $pref-color-key);
			} @else {
				color: get-template-value($map, $color);
			}
		}
	}
}

@mixin template-bg-color($color: color, $pref-color-key: false){
	@each $name, $map in $template-atts {
		.page-template-#{$name} & {
			@if($pref-color-key != false and map-has-key($map, $pref-color-key)){
				background-color: map-get($map, $pref-color-key);
			} @else {
				background-color: get-template-value($map, $color);
			}
		}
	}
}

@mixin template-font-size($size: font-size){
	@each $name, $map in $template-atts {
		@if(map-has-key($map, $size)){
			.page-template-#{$name} & {
				font-size: map-get($map, $size);
			}
		}
	}
}

@mixin template-border-color($color: color, $pref-color-key: false){
	@each $name, $map in $template-atts {
		.page-template-#{$name} & {
			@if($pref-color-key != false and map-has-key($map, $pref-color-key)){
				border-color: map-get($map, $pref-color-key);
			} @else {
				border-color: get-template-value($map, $color);
			}
		}
	}
}

@mixin template-brackets ($color: color, $pref-color-key: false){
	@each $name, $map in $template-atts {
		.page-template-#{$name} & {
			@if($pref-color-key != false and map-has-key($map, $pref-color-key)){
				@include bracket-color(get-template-value($map, $pref-color-key));
			} @else {
				@include bracket-color(get-template-value($map, $color));
			}
		}
	}
}

@mixin template-arrows($border-color: color, $bg-color: color){
	@each $name, $map in $template-atts {
		.page-template-#{$name} & {
			@include arrow-color(get-template-value($map, $border-color), get-template-value($map, $bg-color));
		}
	}
}
